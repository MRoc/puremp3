#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace ID3Library
{

    public partial class LibraryDatabase : System.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertTracks(Tracks instance);
        partial void UpdateTracks(Tracks instance);
        partial void DeleteTracks(Tracks instance);
        #endregion

        public LibraryDatabase(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LibraryDatabase(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LibraryDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LibraryDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Tracks> Tracks
        {
            get
            {
                return this.GetTable<Tracks>();
            }
        }
    }

    [Table()]
    public partial class Tracks : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _ID;

        private string _Filename;

        private string _Artist;

        private string _Album;

        private string _Title;

        private string _FullText;

        private string _ReleaseYear;

        private string _TrackNumber;

        private string _Bitrate;

        private string _ContentType;

        private string _PartOfSet;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(System.Guid value);
        partial void OnIDChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnArtistChanging(string value);
        partial void OnArtistChanged();
        partial void OnAlbumChanging(string value);
        partial void OnAlbumChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFullTextChanging(string value);
        partial void OnFullTextChanged();
        partial void OnReleaseYearChanging(string value);
        partial void OnReleaseYearChanged();
        partial void OnTrackNumberChanging(string value);
        partial void OnTrackNumberChanged();
        partial void OnBitrateChanging(string value);
        partial void OnBitrateChanged();
        partial void OnContentTypeChanging(string value);
        partial void OnContentTypeChanged();
        partial void OnPartOfSetChanging(string value);
        partial void OnPartOfSetChanged();
        #endregion

        public Tracks()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
        public System.Guid ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Filename", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
        public string Filename
        {
            get
            {
                return this._Filename;
            }
            set
            {
                if ((this._Filename != value))
                {
                    this.OnFilenameChanging(value);
                    this.SendPropertyChanging();
                    this._Filename = value;
                    this.SendPropertyChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }

        [Column(Storage = "_Artist", DbType = "NVarChar(64)", UpdateCheck = UpdateCheck.Never)]
        public string Artist
        {
            get
            {
                return this._Artist;
            }
            set
            {
                if ((this._Artist != value))
                {
                    this.OnArtistChanging(value);
                    this.SendPropertyChanging();
                    this._Artist = value;
                    this.SendPropertyChanged("Artist");
                    this.OnArtistChanged();
                }
            }
        }

        [Column(Storage = "_Album", DbType = "NVarChar(64)", UpdateCheck = UpdateCheck.Never)]
        public string Album
        {
            get
            {
                return this._Album;
            }
            set
            {
                if ((this._Album != value))
                {
                    this.OnAlbumChanging(value);
                    this.SendPropertyChanging();
                    this._Album = value;
                    this.SendPropertyChanged("Album");
                    this.OnAlbumChanged();
                }
            }
        }

        [Column(Storage = "_Title", DbType = "NVarChar(64)", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Storage = "_FullText", DbType = "NVarChar(256)", UpdateCheck = UpdateCheck.Never)]
        public string FullText
        {
            get
            {
                return this._FullText;
            }
            set
            {
                if ((this._FullText != value))
                {
                    this.OnFullTextChanging(value);
                    this.SendPropertyChanging();
                    this._FullText = value;
                    this.SendPropertyChanged("FullText");
                    this.OnFullTextChanged();
                }
            }
        }

        [Column(Storage = "_ReleaseYear", DbType = "NVarChar(10)", UpdateCheck = UpdateCheck.Never)]
        public string ReleaseYear
        {
            get
            {
                return this._ReleaseYear;
            }
            set
            {
                if ((this._ReleaseYear != value))
                {
                    this.OnReleaseYearChanging(value);
                    this.SendPropertyChanging();
                    this._ReleaseYear = value;
                    this.SendPropertyChanged("ReleaseYear");
                    this.OnReleaseYearChanged();
                }
            }
        }

        [Column(Storage = "_TrackNumber", DbType = "NVarChar(10)", UpdateCheck = UpdateCheck.Never)]
        public string TrackNumber
        {
            get
            {
                return this._TrackNumber;
            }
            set
            {
                if ((this._TrackNumber != value))
                {
                    this.OnTrackNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TrackNumber = value;
                    this.SendPropertyChanged("TrackNumber");
                    this.OnTrackNumberChanged();
                }
            }
        }

        [Column(Storage = "_Bitrate", DbType = "NVarChar(10)", UpdateCheck = UpdateCheck.Never)]
        public string Bitrate
        {
            get
            {
                return this._Bitrate;
            }
            set
            {
                if ((this._Bitrate != value))
                {
                    this.OnBitrateChanging(value);
                    this.SendPropertyChanging();
                    this._Bitrate = value;
                    this.SendPropertyChanged("Bitrate");
                    this.OnBitrateChanged();
                }
            }
        }

        [Column(Storage = "_ContentType", DbType = "NVarChar(64)", UpdateCheck = UpdateCheck.Never)]
        public string ContentType
        {
            get
            {
                return this._ContentType;
            }
            set
            {
                if ((this._ContentType != value))
                {
                    this.OnContentTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ContentType = value;
                    this.SendPropertyChanged("ContentType");
                    this.OnContentTypeChanged();
                }
            }
        }

        [Column(Storage = "_PartOfSet", DbType = "NVarChar(10)", UpdateCheck = UpdateCheck.Never)]
        public string PartOfSet
        {
            get
            {
                return this._PartOfSet;
            }
            set
            {
                if ((this._PartOfSet != value))
                {
                    this.OnPartOfSetChanging(value);
                    this.SendPropertyChanging();
                    this._PartOfSet = value;
                    this.SendPropertyChanged("PartOfSet");
                    this.OnPartOfSetChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}

#pragma warning restore 1591